package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 07 12:52:09 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblKitchenMenuDImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        KitchenMenuMId,
        ItemL4Id,
        TotalPerson,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        Dated,
        DinnerItemL4Id,
        DinnerPersons,
        LunchItemL4Id,
        LunchPersons,
        TblKitchenMenuM;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int KITCHENMENUMID = AttributesEnum.KitchenMenuMId.index();
    public static final int ITEML4ID = AttributesEnum.ItemL4Id.index();
    public static final int TOTALPERSON = AttributesEnum.TotalPerson.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int DATED = AttributesEnum.Dated.index();
    public static final int DINNERITEML4ID = AttributesEnum.DinnerItemL4Id.index();
    public static final int DINNERPERSONS = AttributesEnum.DinnerPersons.index();
    public static final int LUNCHITEML4ID = AttributesEnum.LunchItemL4Id.index();
    public static final int LUNCHPERSONS = AttributesEnum.LunchPersons.index();
    public static final int TBLKITCHENMENUM = AttributesEnum.TblKitchenMenuM.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblKitchenMenuDImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for KitchenMenuMId, using the alias name KitchenMenuMId.
     * @return the value of KitchenMenuMId
     */
    public BigDecimal getKitchenMenuMId() {
        return (BigDecimal) getAttributeInternal(KITCHENMENUMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for KitchenMenuMId.
     * @param value value to set the KitchenMenuMId
     */
    public void setKitchenMenuMId(BigDecimal value) {
        setAttributeInternal(KITCHENMENUMID, value);
    }

    /**
     * Gets the attribute value for ItemL4Id, using the alias name ItemL4Id.
     * @return the value of ItemL4Id
     */
    public BigDecimal getItemL4Id() {
        return (BigDecimal) getAttributeInternal(ITEML4ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemL4Id.
     * @param value value to set the ItemL4Id
     */
    public void setItemL4Id(BigDecimal value) {
        setAttributeInternal(ITEML4ID, value);
    }

    /**
     * Gets the attribute value for TotalPerson, using the alias name TotalPerson.
     * @return the value of TotalPerson
     */
    public BigDecimal getTotalPerson() {
        return (BigDecimal) getAttributeInternal(TOTALPERSON);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotalPerson.
     * @param value value to set the TotalPerson
     */
    public void setTotalPerson(BigDecimal value) {
        setAttributeInternal(TOTALPERSON, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for Dated, using the alias name Dated.
     * @return the value of Dated
     */
    public Timestamp getDated() {
        return (Timestamp) getAttributeInternal(DATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dated.
     * @param value value to set the Dated
     */
    public void setDated(Timestamp value) {
        setAttributeInternal(DATED, value);
    }

    /**
     * Gets the attribute value for DinnerItemL4Id, using the alias name DinnerItemL4Id.
     * @return the value of DinnerItemL4Id
     */
    public BigDecimal getDinnerItemL4Id() {
        return (BigDecimal) getAttributeInternal(DINNERITEML4ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DinnerItemL4Id.
     * @param value value to set the DinnerItemL4Id
     */
    public void setDinnerItemL4Id(BigDecimal value) {
        setAttributeInternal(DINNERITEML4ID, value);
    }

    /**
     * Gets the attribute value for DinnerPersons, using the alias name DinnerPersons.
     * @return the value of DinnerPersons
     */
    public BigDecimal getDinnerPersons() {
        return (BigDecimal) getAttributeInternal(DINNERPERSONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for DinnerPersons.
     * @param value value to set the DinnerPersons
     */
    public void setDinnerPersons(BigDecimal value) {
        setAttributeInternal(DINNERPERSONS, value);
    }

    /**
     * Gets the attribute value for LunchItemL4Id, using the alias name LunchItemL4Id.
     * @return the value of LunchItemL4Id
     */
    public BigDecimal getLunchItemL4Id() {
        return (BigDecimal) getAttributeInternal(LUNCHITEML4ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LunchItemL4Id.
     * @param value value to set the LunchItemL4Id
     */
    public void setLunchItemL4Id(BigDecimal value) {
        setAttributeInternal(LUNCHITEML4ID, value);
    }

    /**
     * Gets the attribute value for LunchPersons, using the alias name LunchPersons.
     * @return the value of LunchPersons
     */
    public BigDecimal getLunchPersons() {
        return (BigDecimal) getAttributeInternal(LUNCHPERSONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for LunchPersons.
     * @param value value to set the LunchPersons
     */
    public void setLunchPersons(BigDecimal value) {
        setAttributeInternal(LUNCHPERSONS, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTblKitchenMenuM() {
        return (EntityImpl) getAttributeInternal(TBLKITCHENMENUM);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTblKitchenMenuM(EntityImpl value) {
        setAttributeInternal(TBLKITCHENMENUM, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblKitchenMenuD");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                        try {
                            loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        if (operation == DML_INSERT) {
                            setCreatedBy(loginId);
                            setUpdatedBy(loginId);
                            } else if(operation == DML_UPDATE) {
                            setUpdatedBy(loginId);
                        }
        super.doDML(operation, e);
    }
}

